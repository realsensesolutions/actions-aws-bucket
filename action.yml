name: 'AWS S3 Bucket Creator'
description: 'Creates an S3 bucket using Terraform with backend state management. Requires prior setup of Terraform backend resources.'
author: 'realsensesolutions'

inputs:
  name:
    description: 'Base name for the S3 bucket'
    required: true
  cors_configuration:
    description: 'Path to JSON file containing CORS configuration for the S3 bucket. File must contain valid JSON with CORS rules. If blank, no CORS will be configured.'
    required: false

outputs:
  name:
    description: 'The created S3 bucket name'
    value: ${{ steps.create-bucket.outputs.bucket_name }}

runs:
  using: 'composite'
  steps:
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Read CORS Configuration
      id: cors-config
      shell: bash
      run: |
        if [[ -n "${{ inputs.cors_configuration }}" && -f "${{ github.workspace }}/${{ inputs.cors_configuration }}" ]]; then
          CORS_CONTENT=$(cat "${{ github.workspace }}/${{ inputs.cors_configuration }}")
          echo "cors_content<<EOF" >> $GITHUB_OUTPUT
          echo "$CORS_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "✅ CORS configuration loaded from file: ${{ inputs.cors_configuration }}"
        else
          echo "cors_content=" >> $GITHUB_OUTPUT
          if [[ -n "${{ inputs.cors_configuration }}" ]]; then
            echo "⚠️ CORS file not found: ${{ inputs.cors_configuration }}, proceeding without CORS configuration"
          else
            echo "ℹ️ No CORS configuration provided"
          fi
        fi

    - name: Initialize Terraform
      working-directory: ${{ github.action_path }}
      run: |                
        # Initialize Terraform with backend configuration
        terraform init \
          -backend-config="bucket=${{ env.TF_BACKEND_s3 }}" \
          -backend-config="key=${{ inputs.name }}" \
          -backend-config="dynamodb_table=${{ env.TF_BACKEND_dynamodb }}"
      shell: bash
      env:
        TF_VAR_bucket_base_name: ${{ inputs.name }}
        TF_VAR_cors_configuration: ${{ steps.cors-config.outputs.cors_content }}

    - name: Create S3 Bucket
      id: create-bucket
      shell: bash
      working-directory: ${{ github.action_path }}
      run: |
        
        # Plan and Apply
        terraform plan
        terraform apply -auto-approve -lock=false
        
        # Get the bucket name output
        BUCKET_NAME=$(terraform output -raw bucket_name)
        echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT
        echo "Created S3 bucket: $BUCKET_NAME"
      env:
        TF_VAR_bucket_base_name: ${{ inputs.name }}
        TF_VAR_cors_configuration: ${{ steps.cors-config.outputs.cors_content }}

branding:
  icon: 'upload-cloud'
  color: 'orange'